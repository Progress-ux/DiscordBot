import yt_dlp
import asyncio
import re
from config import YDL_OPTIONS, YDL_OPTIONS_FROM_TITLE

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∞
def clean_url(url):
    if 'playlist' not in url and 'list=' in url:
        return re.sub(r"(\?list=[^&]+)", "", url)
    return url

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É 
def is_url(string):
    return re.match(r'^https?://', string) is not None


# –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
async def extract_info(url):
    return await asyncio.to_thread(lambda: yt_dlp.YoutubeDL(YDL_OPTIONS).extract_info(url, download=False, process=False))

# –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def extract_info_search(query):
    def search():
        with yt_dlp.YoutubeDL(YDL_OPTIONS_FROM_TITLE) as ydl:
            info = ydl.extract_info(f"ytsearch:{query}", download=False)
            return info['entries'][0]
    return await asyncio.to_thread(search)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ 
async def download_audio(url):
    def get_audio():
        with yt_dlp.YoutubeDL({
            'format': 'bestaudio/best',
            'quiet': True,
            'nocheckcertificate': True,
            'ignoreerrors': True,
            'cachedir': False
        }) as ydl:
            info = ydl.extract_info(url, download=False)
            if info is None:
                return None
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if 'entries' in info:
                for entry in info['entries']:
                    if entry is not None and entry.get('url'):
                        return entry['url']
                return None
            return info.get('url')
    return await asyncio.to_thread(get_audio)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async def load_rest(info, ctx):
    entries = list(info.get('entries', []))  
    if len(entries) <= 1:
        await ctx.send("üé∂ –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: 0 —Ç—Ä–µ–∫–æ–≤.")
        return

    async def process_entry(entry):
        if entry is None:
            return
        entry_url = entry.get('url')
        if not entry_url:
            return

        def extract():
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                return ydl.extract_info(entry_url, download=False)

        result = await asyncio.to_thread(extract)
        if result is None:
            return
        track_url = result.get('url')
        if not track_url:
            return

        track_title = entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
        ctx.bot.state.addTrack(track_title, track_url)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏–≥—Ä–∞–µ—Ç
    tasks = [process_entry(e) for e in entries[1:]]
    await asyncio.gather(*tasks)
    await ctx.send(f"üé∂ –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(tasks)} —Ç—Ä–µ–∫–æ–≤.")
