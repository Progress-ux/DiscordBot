from discord.ext import commands
from commands.voice_controls import join
from Utils.utils import clean_url, extract_info, extract_info_search, download_audio, load_rest, is_url
import asyncio
from config import FFMPEG_OPTIONS
import discord

@commands.command()
async def play(ctx, *, query: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""

    if not ctx.voice_client:
        await ctx.invoke(join)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
        if is_url(query):
            cleanurl = clean_url(query)
            info = await extract_info(cleanurl)
        else:
            info = await extract_info_search(query)
            cleanurl = info['url']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        if 'entries' in info:
            for entry in info['entries']:
                track_title = entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                track_url = entry.get('url')
                track_audio_url = await download_audio(track_url)
                ctx.bot.state.addTrack(track_title, track_audio_url)
                await ctx.send(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track_title}")
                break

            if not ctx.voice_client.is_playing():
                await play_next(ctx)
            asyncio.create_task(load_rest(info, ctx))

        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        else:
            track_title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            track_audio_url = await download_audio(cleanurl)
            ctx.bot.state.addTrack(track_title, track_audio_url)
            await ctx.send(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track_title}")
            if not ctx.voice_client.is_playing():
                await play_next(ctx)
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
async def play_next(ctx):
    """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏"""

    # –§–ª–∞–≥ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
    if not ctx.bot.state.should_play_next or (not ctx.bot.state.track_queue and not ctx.bot.state.isRepeat):
        ctx.bot.state.should_play_next = True
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    title, url = ctx.bot.state.popNextTrack()
    if title is None and url is None:
        await ctx.send("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    try:
        await ctx.send(f"‚ñ∂ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {title}")
        source = discord.FFmpegPCMAudio(url, **FFMPEG_OPTIONS)
        ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), ctx.bot.loop)) 
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
